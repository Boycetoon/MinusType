I"z<h2 id="播客重度使用者的遗忘焦虑">播客重度使用者的遗忘焦虑</h2>
<p>前段时间想要继续写播客补完计划时发现尽管自己在日常的碎片时间大量听播客，但是经年累月下来很少能对早期的节目有什么记忆，这导致我难以继续这样一个回顾性的专题。能克服遗忘的当然就是复习，但是对于播客这样动辄一小时的线性音频节目再听一遍的成本实在太高，而光是对着很多节目给出的简单的time line和show note实在是难以回忆起主要的内容。</p>

<p>于是我意识到我需要一种适合快速回顾重要节目内容的方法，虽然最好的方法莫过于在听的同时就记一点笔记，并且最好和音频的时间线对应，这样就很方便回顾对于自己印象深刻的地方。但是我个人大多数时候都不是在坐着的时候听播客，很难有随时随地都能记笔记的便利。于是依靠大脑的记忆和回顾依然会成为我主要的方式。这么想来最好的方式是能够生成播客音频的逐字稿，通过文字去快速回顾主要内容无疑是更快捷的方式。现在一些播客节目在发布之后也会附带逐字稿，这无疑是有我这种需求人士的福音。但是这样的配置并不是所有的节目都拥有，还是需要自己搭建可以用的流程。</p>

<h2 id="流程实现">流程实现</h2>
<p>十分幸运我们现在有<strong>飞书妙记</strong>这样的工具，只要将音频文件上传就能生成质量较好的逐字稿，并且还能根据不同人的声音进行区分，这无疑十分适合播客节目，像飞书官方的播客【组织进化论】发布的逐字稿就十分易用。借助飞书妙记，我只需要把需要的音频文件下下来就可以了，那么基本的思路就是：</p>

<h3 id="1手机端记录url到文本文件">1.手机端记录url到文本文件</h3>
<p>在手机端小宇宙app获取播客节目的链接，并通过ios的快捷指令存储到云端的文本文件里。
   <img src="https://github.com/Boycetoon/MinusType/blob/master/image/更舒适的播客回顾流程/微信图片_20220613000327.jpg?raw=true" alt="" /></p>

<h3 id="2爬虫程序下载音频文件">2.爬虫程序下载音频文件</h3>
<p>在电脑端写一个爬虫程序，能够读取这个文本文件中的url，然后自动下载mp3文件存储到本地。幸好小宇宙并没有什么特殊的反爬机制，能够让我这种半吊子也能获得想要的音频文件。值得注意的是在具体的程序中我最后还加了一个将文本文件中的内容清除的功能，这样就避免了重复下载。我还借助了quicker来快速启动程序使流程更加方便。</p>

<p>使用到的代码如下：</p>
<pre><code class="language-Python">
import requests
import re
import os

def get_url_list(file):
    url_list = []
    # 读取文本文件中的url为list
    with open(file, "r") as f:
        for line in f.readlines():
            line = line.strip('\n')
            url_list.append(line)
    return(url_list)

def get_mp3_url(url):
    js = requests.get(url).text
    # 获取节目名称和MP3文件的url
    title = re.findall("(?&lt;=&lt;title&gt;).*?(?=\\s\|)", js)[0]
    mp3_url = re.findall("(?&lt;=&lt;meta property=\"og:audio\" content=\").*?(?=\"/&gt;&lt;script name=)", js)[0]
    return title, mp3_url

def DownloadFile(mp3_url, save_url, file_name):
    try:
        if mp3_url is None or save_url is None or file_name is None:
            print('参数错误')
            return None
        # 文件夹不存在，则创建文件夹
        folder = os.path.exists(save_url)
        if not folder:
            os.makedirs(save_url)
        # 读取MP3资源
        res = requests.get(mp3_url,stream=True)
        # 获取文件地址
        file_path = os.path.join(save_url, file_name)
        print('开始写入文件：', file_path)
        # 打开本地文件夹路径file_path，以二进制流方式写入，保存到本地
        with open(file_path, 'wb') as fd:
            for chunk in res.iter_content():
                fd.write(chunk)
        print(file_name+' 成功下载！')
    except:
        print("程序错误")

def cleanup_txt(file):
	# 清空文本文件
    with open(file, 'r+') as f:
        f.truncate(0)

if __name__ == "__main__":
    file = ".\\podcast-url.txt"
    url_list = get_url_list(file)
    save_url = ".\\"

    for url in url_list:
        title, mp3_url = get_mp3_url(url)
        file_name = title + '.mp3'
        DownloadFile(mp3_url, save_url, file_name)

    cleanup_txt(file)
    
</code></pre>

<h3 id="3批量上传到飞书妙记转文字稿">3.批量上传到飞书妙记转文字稿</h3>
<p>得到音频文件后批量上传到飞书，就能得到播客节目的文字稿了~
<img src="https://github.com/Boycetoon/MinusType/blob/master/image/更舒适的播客回顾流程/screenshot-20220613-001440.png?raw=true" alt="" /></p>
:ET